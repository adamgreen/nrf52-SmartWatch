/*  Copyright (C) 2023  Adam Green (https://github.com/adamgreen)

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
// Large bluetooth icon generated by the following code.
/*
    const uint32_t canvasWidth = 24;
    const uint32_t canvasHeight = 40;
    static GFXcanvas1 canvas(canvasWidth, canvasHeight);

    canvas.fillScreen(0);
    for (uint32_t offset = 0 ; offset < 4 ; offset++)
    {
        canvas.drawLine(10+offset, 0,
                        10+offset, canvasHeight-1, 1);
        canvas.drawLine(14, offset,
                        23-offset, 9, 1);
        canvas.drawLine(4, offset+26,
                        20+offset, 10,
                        1);
        canvas.drawLine(14, canvasHeight-1-offset,
                        23-offset, canvasHeight-1-9, 1);
        canvas.drawLine(4, canvasHeight-1-26-offset,
                        20+offset, canvasHeight-1-10,
                        1);
    }

    uint8_t* pBuffer = canvas.getBuffer();
    FILE* pFile = fopen("Bitmaps/BluetoothLargeBitmap.h", "w");
    fprintf(pFile, "static const uint32_t g_bluetoothLargeBitmapWidth = %lu;\n", canvasWidth);
    fprintf(pFile, "static const uint32_t g_bluetoothLargeBitmapHeight = %lu;\n", canvasHeight);
    fprintf(pFile, "static const uint8_t g_bluetoothLargeBitmap[] =\n{\n    ");
    for (uint32_t row = 0 ; row < canvasHeight ; row++)
    {
        uint8_t currByte = 0;
        for (uint32_t column = 0 ; column < ((canvasWidth+7) & ~7) ; column++)
        {
            if ((column & 7) == 0)
            {
                currByte = *pBuffer++;
                fprintf(pFile, "0b");
            }
            fprintf(pFile, "%s", (currByte & 0x80) ? "1" : "0");
            if ((column & 7) == 7)
            {
                fprintf(pFile, ", ");
            }
            currByte <<= 1;
        }
        fprintf(pFile, "\n    ");
    }
    fprintf(pFile, "};\n");
    fclose(pFile);
*/
static const uint32_t g_bluetoothLargeBitmapWidth = 24;
static const uint32_t g_bluetoothLargeBitmapHeight = 40;
static const uint8_t g_bluetoothLargeBitmap[] =
{
    0b00000000, 0b00111110, 0b00000000,
    0b00000000, 0b00111111, 0b00000000,
    0b00000000, 0b00111111, 0b10000000,
    0b00000000, 0b00111111, 0b11000000,
    0b00000000, 0b00111101, 0b11100000,
    0b00000000, 0b00111100, 0b11110000,
    0b00000000, 0b00111100, 0b01111000,
    0b00000000, 0b00111100, 0b00111100,
    0b00000000, 0b00111100, 0b00011110,
    0b00000000, 0b00111100, 0b00001111,
    0b00001000, 0b00111100, 0b00001111,
    0b00001100, 0b00111100, 0b00011110,
    0b00001110, 0b00111100, 0b00111100,
    0b00001111, 0b00111100, 0b01111000,
    0b00000111, 0b10111100, 0b11110000,
    0b00000011, 0b11111101, 0b11100000,
    0b00000001, 0b11111111, 0b11000000,
    0b00000000, 0b11111111, 0b10000000,
    0b00000000, 0b01111111, 0b00000000,
    0b00000000, 0b00111110, 0b00000000,
    0b00000000, 0b00111110, 0b00000000,
    0b00000000, 0b01111111, 0b00000000,
    0b00000000, 0b11111111, 0b10000000,
    0b00000001, 0b11111111, 0b11000000,
    0b00000011, 0b11111101, 0b11100000,
    0b00000111, 0b10111100, 0b11110000,
    0b00001111, 0b00111100, 0b01111000,
    0b00001110, 0b00111100, 0b00111100,
    0b00001100, 0b00111100, 0b00011110,
    0b00001000, 0b00111100, 0b00001111,
    0b00000000, 0b00111100, 0b00001111,
    0b00000000, 0b00111100, 0b00011110,
    0b00000000, 0b00111100, 0b00111100,
    0b00000000, 0b00111100, 0b01111000,
    0b00000000, 0b00111100, 0b11110000,
    0b00000000, 0b00111101, 0b11100000,
    0b00000000, 0b00111111, 0b11000000,
    0b00000000, 0b00111111, 0b10000000,
    0b00000000, 0b00111111, 0b00000000,
    0b00000000, 0b00111110, 0b00000000,
    };
